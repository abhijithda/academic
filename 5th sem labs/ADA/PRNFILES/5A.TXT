/*	Name : ABHIJITH D.A.		Reg.no : 1PI01IS001

5a>.	Given a knapsack of capacity m and n objects of weights (w1,w2,.....,wn) with 
	profits (p1,p2,.....,pn), write a program to implement greedy knapsack that
	provides maximum profit.
*/


#include<iostream.h>
#include<conio.h>

int const MAX=30;

float knapsack(int [], int [], int ,float [], int );
void sort(int [],int [], int[],int );

void main()
{
 float svector[MAX],optsoln;
 int profit[MAX],weight[MAX];
 int n,m,cu,i;
 clrscr();
 cout<<"\n Enter the number of objects : ";
 cin>>n;
 cout<<"\n Enter the Weights.\n";
 for(i=1;i<=n;i++)
  cin>>weight[i];
 cout<<"\n Enter the Profits.\n";
 for(i=1;i<=n;i++)
  cin>>profit[i];
 cout<<"\n Enter the knapsack capacity : ";
 cin>>m;
 for(i=1;i<=n;i++)
  svector[i]=0.0;
 optsoln=knapsack(profit,weight,m,svector,n);
 cout<<"\n Optimal solution = "<<optsoln;
 cout<<"\n The solution vector : \n";
 for(i=1;i<=n;i++)
  cout<<svector[i]<<"\t";
 getch();
}

float knapsack(int p[],int w[],int m,float x[],int n)
{
 int i,cu,t[MAX];
 float maxprofit=0;
 cu=m;
 sort(p,w,t,n);
 for(i=1;i<=n;i++)
 {
  if(w[t[i]]>cu)
   break;
  x[t[i]]=1.0;
  cu-=w[t[i]];
  maxprofit+=p[t[i]];
 }
 if(i<=n)
 {
  x[t[i]]=(float) cu/w[t[i]];
  maxprofit+=x[t[i]];
 }
 return maxprofit;
}

void sort(int p[],int w[],int t[],int n)
{
 int pass,j,i;
 for(i=1;i<=n;i++)
  t[i]=i;
 for(pass=1;pass<n;pass++)
 {
  for(j=1;j<n;j++)
  {
   if((float)p[t[j]]/w[t[j]] < (float)p[t[j+1]]/w[t[j+1]])
   {
    int tmp;
    tmp=t[j];
    t[j]=t[j+1];
    t[j+1]=tmp;
   }
  }
 }
}


/*----------------------------Outputs------------------------------

1>.

 Enter the number of objects : 3

 Enter the Weights.
20
30
25

 Enter the Profits.
10
15
15

 Enter the knapsack capacity : 50

 Optimal solution = 25.166666
 The solution vector :
1       0.166667        1


2>.

 Enter the number of objects : 4

 Enter the Weights.
20
30
50
40

 Enter the Profits.
10
12
15
20

 Enter the knapsack capacity : 100

 Optimal solution = 42.200001
 The solution vector :
1	1	0.2	1

3>.

 Enter the number of objects : 3

 Enter the Weights.
10
20
30

 Enter the Profits.
50
30
60

 Enter the knapsack capacity : 40

 Optimal solution = 80.333336
 The solution vector :
1       1       0.333333


*/