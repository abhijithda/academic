/*	Name : ABHIJITH D.A.	Reg.no : 1PI01IS001

10a>.	Write a program to find the shortest paths from a single vertex
	to all other nodes in a Digraph.
*/


#include<stdio.h>
#include<conio.h>
#define MAX 10
#define NO_EDGE 9999

int a[MAX][MAX],n,source;

void dijkstras(int c[MAX][MAX],int kay[MAX][MAX])
{
	int i,j,k;
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
		{
			c[i][j]=a[i][j];
			kay[i][j]=0;
		}
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
		if(j!=source)
				if(c[source][i]!=NO_EDGE && c[i][j]!=NO_EDGE &&
				  (c[source][j]==NO_EDGE || c[source][i] + c[i][j] < c[source][j]))
				{
					c[source][j]=c[source][i] + c[i][j];
					kay[source][j]=i;
				}
}


void Output(int kay[MAX][MAX],int i,int j)
{
	if(i==j)
		return;
	if(kay[i][j]==0)
		printf(" -> %d ",j);
	else
	{
		Output(kay,i,kay[i][j]);
		Output(kay,kay[i][j],j);
	}
}

void output_path(int c[MAX][MAX],int kay[MAX][MAX],int i,int j)
{
	if(c[i][j]==NO_EDGE)
	{
		printf("\nThere is no path from %d to %d\n",i,j);
		return;
	}
	printf("\nThe path from %d to %d is \n %d ",i,j,i);
	Output(kay,i,j);
}


void main()
{
	int i,j,c[MAX][MAX],kay[MAX][MAX];

	clrscr();

	printf("\n Enter the number of verticies : ");
	scanf("%d",&n);

	printf("\n Enter the cost adjacency matrix.\n");
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
		{
			scanf("%d",&a[i][j]);
			if(a[i][j]==0||i==j)
				a[i][j]=NO_EDGE;
		}

	printf("\nEnter the source vertex : ");
	scanf("%d",&source);

//Finding shortest paths from source.
	dijkstras(c,kay);

//Displaying.
	printf("\n The shortest paths are \n");
	for(j=1;j<=n;j++)
	{
		output_path(c,kay,source,j);
		if(c[source][j]!=NO_EDGE)
			printf(" = %d. \n",c[source][j]);
	}
	getch();
}


/*--------------------Outputs--------------------

1>.

 Enter the number of verticies : 4

 Enter the cost adjacency matrix.
0 2 4 6
1 0 3 2
0 5 0 1
1 2 3 0

Enter the source vertex : 1

 The shortest paths are

There is no path from 1 to 1

The path from 1 to 2 is
 1  -> 2  = 2.

The path from 1 to 3 is
 1  -> 3  = 4.

The path from 1 to 4 is
 1  -> 2  -> 4  = 4.


2>.

 Enter the number of verticies : 5

 Enter the cost adjacency matrix.
0 1 3 0 9
2 0 1 2 5
1 4 0 7 8
3 2 7 0 1
2 0 1 8 6

Enter the source vertex : 4

 The shortest paths are

The path from 4 to 1 is
 4  -> 1  = 3.

The path from 4 to 2 is
 4  -> 2  = 2.

The path from 4 to 3 is
 4  -> 5  -> 3  = 2.

There is no path from 4 to 4

The path from 4 to 5 is
 4  -> 5  = 1.


3>.

 Enter the number of verticies : 5

 Enter the cost adjacency matrix.
0 1 3 0 9
2 0 1 2 5
1 4 0 7 8
3 2 7 0 1
2 0 1 8 6

Enter the source vertex : 1

 The shortest paths are

There is no path from 1 to 1

The path from 1 to 2 is
 1  -> 2  = 1.

The path from 1 to 3 is
 1  -> 2  -> 3  = 2.

The path from 1 to 4 is
 1  -> 2  -> 4  = 3.

The path from 1 to 5 is
 1  -> 2  -> 4  -> 5  = 4.

*/