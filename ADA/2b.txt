/*	Name : ABHIJITH D.A.	Reg.No : 1PI01IS001

2b>. 	Write a program to find a minimum cost spanning tree
	of a given connected undirected graph using Kruskal's
	method.
*/

#include<stdio.h>
#include<conio.h>
#define SIZE 10

struct node
{
 int u,v;
 int cost;
};
typedef struct node EDG;

int read(int n,EDG a[10],int cost[][10])
{
	int max,i,j,k;
	max=9999,k=1;
	/*reading the upper triangular matrix*/
	for(i=1;i<=n;i++)
	{
		for(j=i+1;j<=n;j++)
		{
			if(cost[i][j]<max&&cost[i][j]!=0)
			{
				a[k].u=i;
				a[k].v=j;
				a[k].cost=cost[i][j];
				k++;
			 }
		 }
	}
	return k-1;
}

int min(EDG a[],int m)
{
	int k=-1,min=9999,i;
	for(i=1;i<=m;i++)
	{
		if(a[i].cost<min)
		{
			k=i;
			min=a[i].cost;
		}
	}
	return k;
}

int find(int i,int s[])
{
	if(i!=s[i])
	{
		i=s[i];
	}
	return i;
}

void union_ij(int i,int j,int s[])
{
	if(i<j)
		s[j]=i;
	else
		s[i]=j;
}



void kruskal(int s[],EDG a[],int m,int n)
{
	int count,sum,pos,u,v,t[SIZE][2],i,j,k=1;
	count=sum=0;

	while(count < n-1)
	{
		pos=min(a,m);
		if(pos==-1)
			break;
		u=a[pos].u;
		v=a[pos].v;

		i=find(u,s);
		j=find(v,s);

		if(i!=j)
		{
			t[k][1]=u;
			t[k][2]=v;
			k++;
			count++;
			union_ij(i,j,s);
			sum=sum+a[pos].cost;
		}
		a[pos].cost=9999;

	}

	if(count==n-1)
	{
		printf("\n spanning tree exists.\n The edges are...");
		for(i=1;i<n;i++)
		 printf("\n %d -> %d ",t[i][1],t[i][2]);
		printf("\n The cost of the spanning tree : %d",sum);
	}
	else
		printf("No spanning tree");
}




void main()
{
	int i,j,cost[10][10],s[10],n,m;
	EDG a[10];
	clrscr();

	printf("Enter the number of nodes : ");
		scanf("%d",&n);

	printf("\n\nEnter the cost adjacency Matrix\n\n");
		for(i=1;i<=n;i++)
			for(j=1;j<=n;j++)
				scanf("%d",&cost[i][j]);

	m=read(n,a,cost);

	//initializing
	for(i=1;i<=n;i++)
		s[i]=i;
	kruskal(s,a,m,n);
	getch();
}



/*------------------------Outputs--------------------

1>.
Enter the number of nodes : 5


Enter the cost adjacency Matrix

0 1 2 3 4
1 0 3 4 5
2 3 0 5 6
3 4 5 0 7
4 5 6 7 0

 spanning tree exists.
 The edges are...
 1 -> 2
 4 -> 1
 1 -> 3
 2 -> 3
 The cost of the spanning tree : 7

2>.
Enter the number of nodes : 4


Enter the cost adjacency Matrix

0 1 8 0
1 0 2 3
8 2 0 1
0 3 1 0

 spanning tree exists.
 The edges are...
 1 -> 2
 3 -> 4
 2 -> 3
 The cost of the spanning tree : 4

*/