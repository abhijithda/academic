/*	Name : ABHIJITH D.A.	Reg.no : 1PI01IS001

6a>.	Write a program to implement 0/1 Knapsack problem using
	dynamic programming.
*/

#include<stdio.h>
#include<conio.h>
#define MAX 20

int w[MAX],p[MAX];

int max(int a,int b)
{
	 return a > b ? a : b ;
}

void knapsack(int c,int n,int f[MAX][MAX])
{
	int i,y;

//Initialize f[n][].
	for(y=0;y<w[n];y++)
		f[n][y]=0;
	for(y=w[n];y<=n;y++)
		f[n][y]=p[n];

//Compute remaining f's
	 for(i=n-1;i>1;i--)
	 {
		for(y=0;y<w[i];y++)
			f[i][y] = f[i+1][y];
		for(y=w[i];y<=c;y++)
			f[i][y] = max ( f[i+1][y] , (f[i+1][y-w[i]]+p[i]) );
	 }
	 f[1][c]=f[2][c];
	 if(c>=w[1])
		f[1][c]=max(f[1][c],f[2][c-w[1]]+p[1]);

}


int traceback(int f[MAX][MAX],int x[MAX],int c,int n)
{
	int i,pro=0;
	for(i=1;i<n;i++)
		if(f[i][c]==f[i+1][c])
			x[i]=0;
		else
		{
			pro+=p[i];
			x[i]=1;
			c-=w[i];
		}
	x[n] = (f[n][c]) ? 1 : 0 ;
	if(x[n])
		pro+=p[n];
	return pro;
}

void main()
{
	 int n,m,i,x[MAX],f[MAX][MAX],profit;
	 clrscr();

	 printf("\n Enter the number of elements : ");
	 scanf("%d",&n);

	 printf("\n Enter the Weights.\n");
	 for(i=1;i<=n;i++)
		 scanf("%d",&w[i]);

	 printf("\n Enter the Profits.\n");
	 for(i=1;i<=n;i++)
		scanf("%d",&p[i]);

	 printf("\n Enter the Knapsack capacity : ");
	 scanf("%d",&m);

	 knapsack(m,n,f);

	 profit=traceback(f,x,m,n);

	 printf("\n The Optimal Profit is %d \n",profit);

	 printf("\n The solution vector is \n");
	 for(i=1;i<=n;i++)
		printf("\t %d ",x[i]);

	 getch();
}


/*----------------------Outputs----------------------

1>.
 Enter the number of elements : 4

 Enter the Weights.
4 5 7 2

 Enter the Profits.
6 3 8 4

 Enter the Knapsack capacity : 15

 The Optimal Profit is 18

 The solution vector is
         1       0       1       1


2>.

 Enter the number of elements : 1

 Enter the Weights.
1

 Enter the Profits.
1

 Enter the Knapsack capacity : 1

 The Optimal Profit is 1

 The solution vector is
         1

3>.
 Enter the number of elements : 4

 Enter the Weights.
4 5 7 2

 Enter the Profits.
6 3 8 4

 Enter the Knapsack capacity : 18

 The Optimal Profit is 18

 The solution vector is
         1       0       1       1

4>.

 Enter the number of elements : 5

 Enter the Weights.
4 8 5 6 3

 Enter the Profits.
8 3 5 7 4

 Enter the Knapsack capacity : 15

 The Optimal Profit is 20

 The solution vector is
         1       0       1       1       0

*/