/*	Name : ABHIJITH D.A.	Reg.No : 1PI01IS001

8b>.	Write a program to implement all pairs shortest path
	problem, using dynamic programming.
*/

#include<stdio.h>
#include<conio.h>
#define MAX 10
#define NO_EDGE 9999

int a[MAX][MAX],n;

void allpairs(int c[MAX][MAX],int kay[MAX][MAX])
{
	int i,j,k;
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
		{
			c[i][j]=a[i][j];
			kay[i][j]=0;
		}
	for(k=1;k<=n;k++)
		for(i=1;i<=n;i++)
			for(j=1;j<=n;j++)
			if(i!=j)
				if(c[i][k]!=NO_EDGE && c[k][j]!=NO_EDGE &&
				  (c[i][j]==NO_EDGE || c[i][k] + c[k][j] < c[i][j]))
				{
					c[i][j]=c[i][k] + c[k][j];
					kay[i][j]=k;
				}
}


void Output(int kay[MAX][MAX],int i,int j)
{
	if(i==j)
		return;
	if(kay[i][j]==0)
		printf(" -> %d ",j);
	else
	{
		Output(kay,i,kay[i][j]);
		Output(kay,kay[i][j],j);
	}
}

void output_path(int c[MAX][MAX],int kay[MAX][MAX],int i,int j)
{
	if(c[i][j]==NO_EDGE)
	{
		printf("\nThere is no path from %d to %d\n",i,j);
		return;
	}
	printf("\nThe path from %d to %d is \n %d ",i,j,i);
	Output(kay,i,j);
}


void main()
{
	int i,j,c[MAX][MAX],kay[MAX][MAX];

	clrscr();

	printf("\n Enter the number of verticies : ");
	scanf("%d",&n);

	printf("\n Enter the cost adjacency matrix.\n");
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
		{
			scanf("%d",&a[i][j]);
			if(a[i][j]==0||i==j)
				a[i][j]=NO_EDGE;
		}

//Finding shortest paths.
	allpairs(c,kay);

//Displaying.
	printf("\n The shortest paths are \n");
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
		{
			output_path(c,kay,i,j);
			if(c[i][j]!=NO_EDGE)
				printf(" = %d. \n",c[i][j]);
		}
	getch();
}


/*---------------------Outputs------------------------

1>.
 Enter the number of verticies : 4

 Enter the cost adjacency matrix.
0 2 4 6
8 0 1 3
5 7 0 9
1 3 6 0

 The shortest paths are

There is no path from 1 to 1

The path from 1 to 2 is
 1  -> 2  = 2.

The path from 1 to 3 is
 1  -> 2  -> 3  = 3.

The path from 1 to 4 is
 1  -> 2  -> 4  = 5.

The path from 2 to 1 is
 2  -> 4  -> 1  = 4.

There is no path from 2 to 2

The path from 2 to 3 is
 2  -> 3  = 1.

The path from 2 to 4 is
 2  -> 4  = 3.

The path from 3 to 1 is
 3  -> 1  = 5.

The path from 3 to 2 is
 3  -> 2  = 7.

There is no path from 3 to 3

The path from 3 to 4 is
 3  -> 4  = 9.

The path from 4 to 1 is
 4  -> 1  = 1.

The path from 4 to 2 is
 4  -> 2  = 3.

The path from 4 to 3 is
 4  -> 2  -> 3  = 4.

There is no path from 4 to 4


2>.

 Enter the number of verticies : 3

 Enter the cost adjacency matrix.
0 1 9
2 0 5
0 10 0

 The shortest paths are

There is no path from 1 to 1

The path from 1 to 2 is
 1  -> 2  = 1.

The path from 1 to 3 is
 1  -> 2  -> 3  = 6.

The path from 2 to 1 is
 2  -> 1  = 2.

There is no path from 2 to 2

The path from 2 to 3 is
 2  -> 3  = 5.

The path from 3 to 1 is
 3  -> 2  -> 1  = 12.

The path from 3 to 2 is
 3  -> 2  = 10.

There is no path from 3 to 3

*/