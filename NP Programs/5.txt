/*	Name : ABHIJITH D.A.		Reg.no : 1PI01IS001

B1>.	Write and execute a program to send a message by the client 
	to the server and echo the same message back to cleint by the
	server.
*/

/*echo server*/
#include <stdio.h>
#include <iostream.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#define SERVER_TCP_PORT  15000
#define BUFLEN 		 256

int main(int argc, char** argv)
{
	int n;
	int bytes_to_read;
	int port;
	int sd, new_sd;
	socklen_t client_len;
	struct sockaddr_in server, client;
	char *bp;
	char buf[BUFLEN];
	if(argc <2){
	printf("Enter all the parameters correctly\n");
	printf("Usage:<a.out> server port");
	exit(1);
	}
	port = atoi(argv[1]);
	/* create a stream socket */
	if((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1){
		cerr << "server: can't create a socket";
		exit(1);
	}
	/* Bind address to a socket */
	bzero((char*) &server, sizeof(struct sockaddr_in));
	server.sin_family = AF_INET;
	server.sin_port = htons(port);
	server.sin_addr.s_addr = htonl(INADDR_ANY);
	listen(sd, 5);
	while(1){
		client_len = sizeof(client);
		if((new_sd = accept(sd, (struct sockaddr*) &client, &client_len)) == -1){
			cerr << "server: can't accept client\n";
			exit(1);
		}
		bp = buf;
		bytes_to_read = BUFLEN;
		while((n = read(new_sd, bp, bytes_to_read)) > 0){
			bp += n;
			bytes_to_read -= n;
		}
		write(new_sd, buf, BUFLEN);
		close(new_sd);
	}
	close(sd);
  return 0;
}

/*---------------------------Client Program-----------------------------

/*echoclient*/
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <iostream.h>
#include <netdb.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#define SERVER_TCP_PORT 15000
#define BUFLEN		256
int main(int argc, char** argv)
{	int n;
	int bytes_to_read;
	int sd;
	if(argc<3){
	printf("Error : Specify all the parameters\n");
	printf("\nUsage: <a.out> server address port");
	exit(1);
	}
	int port = atoi(argv[2]);
	struct hostent *hp;
	struct sockaddr_in server;
	char *host = argv[1];
	char *bp, rbuf[BUFLEN], sbuf[BUFLEN];
	/*Create a stream socket*/
	if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1){
		cerr << "client: can't create a socket\n";
		exit(1);
	}
	bzero((char*)&server, sizeof(struct sockaddr_in));
	server.sin_family = AF_INET;
	server.sin_port = htons(port);
	if((hp = gethostbyname(host)) == NULL){
		cerr << "client: can't get server's address\n";
		exit(1);
	}
	bcopy(hp->h_addr, (char*) &server.sin_addr, hp->h_length);
	/* connecting to the server */
	if(connect(sd, (struct sockaddr*) &server, sizeof(server)) == -1){
		cerr << "client: can't connect";
		exit(1);
	}

	cout << "Connected: server's address %s\n" <<  hp->h_name;

	cout << "Transmit data:\n";
	gets(sbuf);
	write(sd, sbuf, BUFLEN);
	cout << "Receiving the data: \n";
	bp = rbuf;
	bytes_to_read = BUFLEN;
	while((n = read(sd, bp, bytes_to_read)) > 0){
		bp += n;
		bytes_to_read -= n;
	}
	cout << "\n" <<  rbuf;
	close(sd);
 return 0;
}


/*-------------------------------Output------------------------------

[root@pes Working]# ./server 15001&
[1] 5405
[root@pes Working]# ./client
Error : Specify all the parameters

Usage: <a.out> server address port[root@pes Working]# ./client 192.168.27.8 15001
Connected: server's address %s
192.168.27.8Transmit data:
this is a simple message by the client
Receiving the data:

this is a simple message by the client
[root@pes Working]#*/


