/*	Name : ABHIJITH D.A.		Reg.no : 1PI01IS001

A4>.	Write and execute a program to find the product of two 
	matrices using message queues
*/


#include <iostream.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/msg.h>
#include <unistd.h>
#include "functions.h"

/* Main Function */
int main()
{
 int msgid1=msgget((key_t)0x1, IPC_CREAT|0666);
 int msgid2=msgget((key_t)0x2, IPC_CREAT|0666);
 int msgid3=msgget((key_t)0x3, IPC_CREAT|0666);
 buff1.mtype= rbuff1.mtype=buff2.mtype=rbuff2.mtype=buff3.mtype=rbuff3.mtype=1;
 int a[10][10], b[10][10], c[10][10], m, n, p, i, j, k, temp;
 pid_t pid;
 cout<<"\nEnter the no. of rows of Matrix A : "; cin>>m;
 cout<<"\nEnter the no. of columns of Matrix A:" cin>>n;
 cout<< "\nEnter the no.of rows of Matrix B  : ";cin>>p1
 cout<<"\nEnter the no. of columns of Matrix B : "; cin>>p;
 cout<<"\nEnter the matrix A :\n";
accept_mat2D(a,m,n);
cout<<"\nEnter the matrix B :\n";
accept_mat2D(b,p1,p);
 int row=0, col=0;
 for(i=0; i<m; i++){
  for(j=0; j<p; j++){
    pid=fork();
   if(pid!=0){
	    for(k=0; k<n; k++)
	      buff1.mtext[k]=a[row][k];
    msgsnd(msgid1, &buff1, 20, 0);
    for(k=0; k<n; k++)
      buff2.mtext[k]=b[k][col];
    msgsnd(msgid2, &buff2, 20, 0);
   }
  else{
      msgrcv(msgid1, &rbuff1, 20, 1, 0);
      msgrcv(msgid2, &rbuff2, 20, 1, 0);
      temp=0;
      for(k=0; k<n; k++)
	   temp+=rbuff1.mtext[k]*rbuff2.mtext[k];
       rbuff3.mtext[0]=temp;
       msgsnd(msgid3, &rbuff3, 20, 0);
    }
       wait(0);
       msgrcv(msgid3, &buff3, 20, 1, 0);
       c[row][col]=buff3.mtext[0];
       col++;
  }
  row++;
  col=0;
 }
 cout<<"\nThe resultant matrix is :\n";
 display_mat2D(c,m,p);
 }
 return 0;
}


/*-------------------------------Output------------------------------

[root@localhost NPlab]# ./a.out

Enter the no. of rows of Matrix A : 3
Enter the no. of columns of Matrix A: 3
Enter the no.of rows of Matrix B:3
Enter the no. of columns of Matrix B : 3
Enter the matrix A :
1
2
3
4
5
6
7
8
9
Enter the matrix B :
11
12
13
14
15
16
17
18
19
The resultant matrix is :
90      96      102
216     231     246
342     366     390
*/
